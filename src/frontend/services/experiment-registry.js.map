{"version":3,"file":"experiment-registry.js","sourceRoot":"","sources":["../../../../src/frontend/services/experiment-registry.ts"],"names":[],"mappings":";;;;;;;;;;;;OAAO,EAAE,UAAU,EAAE,WAAW,EAAE,MAAM,EAAE,MAAM,eAAe;AAI/D,OAAO,IAAM,WAAW,GAAG,IAAI,WAAW,CAAC,aAAa,CAAC,CAAC;AAM1D;IAIE,mCAAiC,WAAyB;QAH1D,gBAAW,GAAsB,EAAE,CAAC;QACpC,oBAAe,GAA0B,EAAE,CAAC;QAG1C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC,MAAM,CAAoB,IAAI,EAAE,EAAE,CAAC,CAAC;QACnE,IAAI,CAAC,eAAe,GAAG,WAAW,CAAC,MAAM,CAAwB,UAAC,GAAG,EAAE,IAAI;YACzE,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,IAAI,CAAC,KAAK,CAAC,MAAM,CAAwB,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC;QAChF,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAED,iDAAa,GAAb,UAAc,EAAU;QACtB,MAAM,CAAC,IAAI,CAAC,WAAW,CAAC,EAAE,CAAC,CAAC;IAC9B,CAAC;IAED,qDAAiB,GAAjB,UAAkB,EAAU;QAC1B,MAAM,CAAC,IAAI,CAAC,eAAe,CAAC,EAAE,CAAC,CAAC;IAClC,CAAC;IAED,qDAAiB,GAAjB;QAAA,iBAGC;QAFC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,WAAW,CAAC;aACjC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,GAAG,CAAC,EAArB,CAAqB,CAAC,CAAC;IACvC,CAAC;IAvBH;QAAC,UAAU,EAAE;mBAKE,MAAM,CAAC,WAAW,CAAC;;iCALrB;IAwBb,gCAAC;AAAD,CAAC,AAvBD,IAuBC;AAED,cAAwC,QAAuB,EAAE,IAAO;IAAhC,wBAAuB,GAAvB,aAAuB;IAC7D,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,EAAE;QAC7B,GAAC,IAAI,CAAC,EAAE,CAAC,GAAE,IAAI;;KAChB,CAAC,CAAC;;AACL,CAAC;AAGD,mCAAmC,WAAyB;IAC1D,MAAM,CAAC,EAAE,OAAO,EAAE,WAAW,EAAE,QAAQ,EAAE,WAAW,EAAE,CAAC;AACzD,CAAC","sourcesContent":["import { Injectable, OpaqueToken, Inject } from '@angular/core';\nimport { Experiment, ExperimentCase } from '../models/experiment';\n\n\nexport const EXPERIMENTS = new OpaqueToken('Experiments');\n\nexport type IdMap<T extends { id: string }> = { [id: string]: T }\n\n\n@Injectable()\nexport class ExperimentRegistryService {\n  experiments: IdMap<Experiment> = {};\n  experimentCases: IdMap<ExperimentCase> = {};\n\n  constructor(@Inject(EXPERIMENTS) experiments: Experiment[]) {\n    this.experiments = experiments.reduce<IdMap<Experiment>>(byId, {});\n    this.experimentCases = experiments.reduce<IdMap<ExperimentCase>>((all, next) => {\n      return Object.assign(all, next.cases.reduce<IdMap<ExperimentCase>>(byId, {}));\n    }, {});\n  }\n\n  getExperiment(id: string): Experiment {\n    return this.experiments[id];\n  }\n\n  getExperimentCase(id: string): ExperimentCase {\n    return this.experimentCases[id];\n  }\n\n  getAllExperiments() {\n    return Object.keys(this.experiments)\n      .map(key => this.experiments[key]);\n  }\n}\n\nfunction byId<T extends { id: string }>(entities: IdMap<T> = {}, next: T): IdMap<T> {\n  return Object.assign(entities, {\n    [next.id]: next\n  });\n}\n\n\nexport function provideExperiments(experiments: Experiment[]) {\n  return { provide: EXPERIMENTS, useValue: experiments };\n}"]}