{"version":3,"file":"module-builder.js","sourceRoot":"","sources":["../../../src/frontend/module-builder.ts"],"names":[],"mappings":";;;;;;;;;OAAO,EAAE,QAAQ,EAAE,SAAS,EAA6B,MAAM,eAAe;OAEvE,EAAE,OAAO,EAAE,MAAM,QAAQ;AAKhC,wCACE,WAA4C,EAC5C,WAAyB;IAEzB,IAAM,iBAAiB,GAAG,OAAO,CAAC,WAAW,CAAC,GAAG,CAAC,UAAA,GAAG,IAAI,OAAA,GAAG,CAAC,KAAK,CAAC,GAAG,CAAC,UAAA,CAAC;QACtE,MAAM,CAAC;YACL,EAAE,EAAE,CAAC,CAAC,EAAE;YACR,SAAS,EAAE,iBAAiB,CAAC,CAAC,CAAC;SAChC,CAAA;IACH,CAAC,CAAC,EALuD,CAKvD,CAAC,CAAC,CAAC;IAEL,IAAM,UAAU,GAAG,iBAAiB,CAAC,MAAM,CAAC,UAAC,GAAG,EAAE,IAAI;QACpD,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,GAAG,EAAE,UAAE,GAAC,IAAI,CAAC,EAAE,CAAC,GAAE,IAAI,CAAC,SAAS,KAAE,CAAC,CAAC;;IAC3D,CAAC,EAAE,EAAE,CAAC,CAAC;IAEP,IAAM,QAAQ,GAAG,gBAAgB,CAAC,WAAW,EAAE,iBAAiB,CAAC,GAAG,CAAC,UAAA,CAAC,IAAI,OAAA,CAAC,CAAC,SAAS,EAAX,CAAW,CAAC,CAAC,CAAC;IAExF,MAAM,CAAC,EAAE,kBAAQ,EAAE,sBAAU,EAAE,CAAC;AAClC,CAAC;AAGD,kCAAkC,cAA8B;IAK9D;QACE;YACE,MAAM,CAAC,MAAM,CAAC,IAAI,EAAE,cAAc,CAAC,OAAO,IAAI,EAAE,CAAC,CAAC;QACpD,CAAC;QAPH;YAAC,SAAS,CAAC;gBACT,QAAQ,EAAE,cAAc,CAAC,QAAQ;gBACjC,MAAM,EAAE,cAAc,CAAC,MAAM;aAC9B,CAAC;;mCAAA;QAKF,8BAAC;IAAD,CAAC,AAJD,IAIC;IAED,MAAM,CAAC,uBAAuB,CAAC;AACjC,CAAC;AAGD,iCAAiC,WAA4C,EAAE,UAAuB;IAYpG;QAAA;QAAyB,CAAC;QAX1B;YAAC,QAAQ,CAAC;gBACR,OAAO,EAAE;oBACP,WAAW;iBACZ;gBACD,YAAY,EAAE;oBACZ,UAAU;iBACX;gBACD,eAAe,EAAE;oBACf,UAAU;iBACX;aACF,CAAC;;4BAAA;QACuB,uBAAC;IAAD,CAAC,AAA1B,IAA0B;IAG1B,MAAM,CAAC,gBAAgB,CAAC;AAC1B,CAAC","sourcesContent":["import { NgModule, Component, Type, ModuleWithProviders } from '@angular/core';\nimport { CommonModule } from '@angular/common';\nimport { flatten } from 'lodash';\nimport { Experiment, ExperimentCase } from './models/experiment';\nimport { ResolvedLab } from './models/lab';\n\n\nexport function getModuleForExperiments(\n  inputModule: ModuleWithProviders | Type<any>,\n  experiments: Experiment[]\n): ResolvedLab {\n  const componentsWithIds = flatten(experiments.map(exp => exp.cases.map(c => {\n    return {\n      id: c.id,\n      component: generateComponent(c)\n    }\n  })));\n\n  const components = componentsWithIds.reduce((all, next) => {\n    return Object.assign(all, { [next.id]: next.component });\n  }, {});\n\n  const ngModule = generateNgModule(inputModule, componentsWithIds.map(e => e.component));\n\n  return { ngModule, components };\n}\n\n\nexport function generateComponent(experimentCase: ExperimentCase): Type<any> {\n  @Component({\n    template: experimentCase.template,\n    styles: experimentCase.styles\n  })\n  class ExperimentCaseComponent {\n    constructor() {\n      Object.assign(this, experimentCase.context || {});\n    }\n  }\n\n  return ExperimentCaseComponent;\n}\n\n\nexport function generateNgModule(inputModule: ModuleWithProviders | Type<any>, components: Type<any>[]): Type<any> {\n  @NgModule({\n    imports: [\n      inputModule\n    ],\n    declarations: [\n      components\n    ],\n    entryComponents: [\n      components\n    ]\n  })\n  class ExperimentModule { }\n\n\n  return ExperimentModule;\n}"]}